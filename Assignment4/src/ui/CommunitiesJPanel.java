/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Encounter;
import model.House;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.VitalSigns;

/**
 *
 * @author murali
 */
public class CommunitiesJPanel extends javax.swing.JPanel {

    /**
     * Creates new form Communities
     */
    
    House house;
    City city;
    PersonDirectory pd;
    PatientDirectory patdir;
    VitalSigns vs;
    Encounter e;
    
    public CommunitiesJPanel(House house, City city, PersonDirectory pd, PatientDirectory patdir, VitalSigns vs, Encounter e) {
        initComponents();
        
        this.house = house;
        this.city = city;
        this.pd = pd;
        this.patdir = patdir;
        this.vs = vs;
        this.e=e;
        
        populateComboBox();
        populateComboBoxCity();
        populateComboBoxHouse();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDisplay = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("VIEW ABNORMALITIES BY COMMUNITIES");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, -1, -1));

        tblDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Age", "Nominal BP", "Blood Pressure"
            }
        ));
        jScrollPane1.setViewportView(tblDisplay);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 420, 510, 279));

        jLabel2.setText("CHOOSE PINCODE FOR VIEWING ABNORMAL CASES:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, -1, 20));

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 260, 134, -1));
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 180, 100, -1));

        jLabel4.setText("CHOOSE CITY FOR VIEWING ABNORMAL CASES:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 310, -1, 20));

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 310, 134, 30));

        jLabel5.setText("CHOOSE HOUSE FOR VIEWING ABNORMAL CASES:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, -1, 30));

        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 200, 134, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        model.setRowCount(0);
        
        ArrayList list = new ArrayList<String>();
        
        String select = (String) jComboBox1.getSelectedItem();
                
                for( VitalSigns vs : e.getEncounter()){
                    if( vs.getPin() == Integer.parseInt(select)){
                        String fname = vs.getFname();
                        String lname = vs.getLname();
                        int age = vs.getAge();
                        double bp = vs.getBloodPressure();
                        String normalBp="";
                        
                        if (age <= 25) {
                            normalBp = "122 - 78.0";
                            if( bp > 122 || bp <78) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 26 && age <= 30){ 
                            normalBp = "120 - 70";
                            if( bp > 120 || bp <70) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        
                        if ( age > 31 && age <= 35){
                            normalBp = "117 - 66";
                            if( bp > 117 || bp <66) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 35 && age <= 45){
                            normalBp = "114 - 62";
                            if( bp > 114 || bp <62) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 45 && age <= 60){
                            normalBp = "111 - 57";
                            if( bp > 111 || bp <57) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 60 && age <= 100){
                            normalBp = "109 - 53";
                            if( bp > 109 || bp <53) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        
                        
//                        Object[] row = new Object[5];
//                        row[0] = fname;
//                        row[1] = lname;
//                        row[2] = age;
//                        row[3] = normalBp;
//                        row[4] = bp;
//
//                        model.addRow(row);
                    
                } 
                }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        model.setRowCount(0);
        
        
        String select = (String) jComboBox2.getSelectedItem();
                
                for( VitalSigns vs : e.getEncounter()){
                    if( vs.getCity().equalsIgnoreCase(select)){
                        String fname = vs.getFname();
                        String lname = vs.getLname();
                        int age = vs.getAge();
                        double bp = vs.getBloodPressure();
                        String normalBp="";
                        
                        if (age <= 25) {
                            normalBp = "122 - 78.0";
                            if( bp > 122 || bp <78) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 26 && age <= 30){ 
                            normalBp = "120 - 70";
                            if( bp > 120 || bp <70) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        
                        if ( age > 31 && age <= 35){
                            normalBp = "117 - 66";
                            if( bp > 117 || bp <66) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 35 && age <= 45){
                            normalBp = "114 - 62";
                            if( bp > 114 || bp <62) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 45 && age <= 60){
                            normalBp = "111 - 57";
                            if( bp > 111 || bp <57) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 60 && age <= 100){
                            normalBp = "109 - 53";
                            if( bp > 109 || bp <53) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                    
                } 
                }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        model.setRowCount(0);
        
        
        String select = (String) jComboBox3.getSelectedItem();
                
                for( VitalSigns vs : e.getEncounter()){
                    if( vs.getHouseName().equalsIgnoreCase(select)){
                        String fname = vs.getFname();
                        String lname = vs.getLname();
                        int age = vs.getAge();
                        double bp = vs.getBloodPressure();
                        String normalBp="";
                        
                        if (age <= 25) {
                            normalBp = "122 - 78.0";
                            if( bp > 122 || bp <78) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 26 && age <= 30){ 
                            normalBp = "120 - 70";
                            if( bp > 120 || bp <70) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        
                        if ( age > 31 && age <= 35){
                            normalBp = "117 - 66";
                            if( bp > 117 || bp <66) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 35 && age <= 45){
                            normalBp = "114 - 62";
                            if( bp > 114 || bp <62) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 45 && age <= 60){
                            normalBp = "111 - 57";
                            if( bp > 111 || bp <57) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                        if ( age > 60 && age <= 100){
                            normalBp = "109 - 53";
                            if( bp > 109 || bp <53) populateDisplayTabel(fname,lname,age,bp,normalBp);
                        }
                    
                } 
                }
    }//GEN-LAST:event_jComboBox3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDisplay;
    // End of variables declaration//GEN-END:variables

    private void populateComboBox() {
        
        ArrayList<String> list = new ArrayList<>();
        
        for( Person obj : pd.getPersonDirectory()){
            if(!(list.contains(String.valueOf(obj.getPin())))){
                    Object[] row = new Object[1];
                    row[0] = obj.getPin();
                    list.add(String.valueOf(obj.getPin()));
                    jComboBox1.addItem(String.valueOf((obj.getPin())));
            }
        }
        
//        for( Person obj : pd.getPersonDirectory()){
//            if(!(list.contains(obj.getCity()))){
//                    Object[] row = new Object[1];
//                    row[0] = obj.getCity();
//                    list.add(obj.getCity());
//                    jComboBox1.addItem(obj.getCity());
//            }
//        }
    }

    private void populateDisplayTabel(String fname, String lname, int age, double bp, String normalBp) {
        
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
//        model.setRowCount(0);
            
            Object[] row = new Object[5];
            row[0] = fname;
            row[1] = lname;
            row[2] = age;
            row[3] = normalBp;
            row[4] = bp;
            
            model.addRow(row);
    }

    private void populateComboBoxCity() {
        
        ArrayList<String> list = new ArrayList<>();
        
        for( Person obj : pd.getPersonDirectory()){
            if(!(list.contains(obj.getCity()))){
                    Object[] row = new Object[1];
                    row[0] = obj.getCity();
                    list.add(obj.getCity());
                    jComboBox2.addItem(obj.getCity());
            }
        }
    }

    private void populateComboBoxHouse() {
        
        ArrayList<String> list = new ArrayList<>();
        
        for( Person obj : pd.getPersonDirectory()){
            if(!(list.contains(obj.getHouseName()))){
                    Object[] row = new Object[1];
                    row[0] = obj.getHouseName();
                    list.add(obj.getHouseName());
                    jComboBox3.addItem(obj.getHouseName());
            }
        }
    }
}